// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iMojeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This object will only appear when it is necessary to redirect the payer to an external link, such as in case of Pay-By-Link payment.
SWIFT_CLASS("_TtC8iMojeSDK6Action")
@interface Action : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Action type
typedef SWIFT_ENUM(NSInteger, ActionType, closed) {
/// Redirect
  ActionTypeRedirect = 0,
/// Unknown type
  ActionTypeUnknown = 1,
};


/// Customer information
SWIFT_CLASS("_TtC8iMojeSDK7Address")
@interface Address : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Billing information
SWIFT_CLASS("_TtC8iMojeSDK7Billing")
@interface Billing : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Card information
SWIFT_CLASS("_TtC8iMojeSDK4Card")
@interface Card : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Shipping information
SWIFT_CLASS("_TtC8iMojeSDK8CartData")
@interface CartData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Address information
SWIFT_CLASS("_TtC8iMojeSDK15CartDataAddress")
@interface CartDataAddress : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Create transaction information
SWIFT_CLASS("_TtC8iMojeSDK17CreateTransaction")
@interface CreateTransaction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Checkout information
SWIFT_CLASS("_TtC8iMojeSDK8Checkout")
@interface Checkout : CreateTransaction
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Cost  information
SWIFT_CLASS("_TtC8iMojeSDK4Cost")
@interface Cost : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Create payment information
SWIFT_CLASS("_TtC8iMojeSDK13CreatePayment")
@interface CreatePayment : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Customer information
SWIFT_CLASS("_TtC8iMojeSDK8Customer")
@interface Customer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Debit payment profile information
SWIFT_CLASS("_TtC8iMojeSDK19DebitPaymentProfile")
@interface DebitPaymentProfile : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC8iMojeSDK14MaxTransaction")
@interface MaxTransaction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC8iMojeSDK14MinTransaction")
@interface MinTransaction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Payment information
SWIFT_CLASS("_TtC8iMojeSDK7Payment")
@interface Payment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC8iMojeSDK13PaymentMethod")
@interface PaymentMethod : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Payment method code type </br>
/// See more: https://data.imoje.pl/docs/en/api-transaction_en.pdf#page=14
typedef SWIFT_ENUM(NSInteger, PaymentMethodCodeType, closed) {
/// mTransfer - mBank
  PaymentMethodCodeTypeMtransfer = 0,
/// Przelew24
  PaymentMethodCodeTypeBzwbk = 1,
/// Pekao24Przelew - Bank Pekao
  PaymentMethodCodeTypePekao24 = 2,
/// Płacę z Inteligo
  PaymentMethodCodeTypeInteligo = 3,
/// Płać z iPKO
  PaymentMethodCodeTypeIpko = 4,
/// Płacę z Getin Bank
  PaymentMethodCodeTypeGetin = 5,
/// Płacę z Noble Bank
  PaymentMethodCodeTypeNoble = 6,
/// Płacę z Idea Bank - IdeaBank
  PaymentMethodCodeTypeIdeabank = 7,
/// Credit Agricole e-przelew
  PaymentMethodCodeTypeCreditagricole = 8,
/// Płacę z T-mobile Usługi Bankowe dostarczane przez Alior Bank
  PaymentMethodCodeTypeTmobile = 9,
/// Płacę z Alior Bankiem
  PaymentMethodCodeTypeAlior = 10,
/// Bank Nowy BFG
  PaymentMethodCodeTypePbs = 11,
/// Millennium - płatności interneto
  PaymentMethodCodeTypeMillennium = 12,
/// Przelew z Citi Handlowego
  PaymentMethodCodeTypeCiti = 13,
/// Płać z BOŚ
  PaymentMethodCodeTypeBos = 14,
/// Płacę z BGŻ BNP Paribas
  PaymentMethodCodeTypeBnpparibas = 15,
/// Pocztowy24
  PaymentMethodCodeTypePocztowy = 16,
/// Płacę z Plus Bank
  PaymentMethodCodeTypePlusbank = 17,
/// Bank Spółdzielczy
  PaymentMethodCodeTypeBs = 18,
/// Bank Spółdzielczy w Brodnicy
  PaymentMethodCodeTypeBspb = 19,
/// Envelo Bank
  PaymentMethodCodeTypeEnvelo = 20,
/// Euro Bank
  PaymentMethodCodeTypeEurobank = 21,
/// Deutsche Bank
  PaymentMethodCodeTypeDeutschebank = 22,
/// Raiffeisen Bank Polska
  PaymentMethodCodeTypeRaiffeisenpolbank = 23,
/// Orange bank
  PaymentMethodCodeTypeOrange = 24,
/// Bank South Pacific
  PaymentMethodCodeTypeBspw = 25,
/// Nest Bank
  PaymentMethodCodeTypeNest = 26,
/// Neobank
  PaymentMethodCodeTypeNeo = 27,
/// Toyota Bank
  PaymentMethodCodeTypeToyota = 28,
/// Płatność kartą 3DS
  PaymentMethodCodeTypeEcom3ds = 29,
/// Płatność za pomocą usługi oneclick
  PaymentMethodCodeTypeOneclick = 30,
/// Płatność za pomocą usługi recurring
  PaymentMethodCodeTypeRecurring = 31,
/// blik
  PaymentMethodCodeTypeBlik = 32,
/// ing
  PaymentMethodCodeTypeIng = 33,
/// Twisto Bank
  PaymentMethodCodeTypeTwisto = 34,
/// Unknown type
  PaymentMethodCodeTypeUnknown = 35,
};

@class UIColor;
@class NSCoder;

/// Payment method code item view
SWIFT_CLASS("_TtC8iMojeSDK25PaymentMethodCodeViewCell")
@interface PaymentMethodCodeViewCell : UICollectionViewCell
/// padding of image
@property (nonatomic) CGFloat padding;
/// border width
@property (nonatomic) CGFloat borderWidth;
/// border color
@property (nonatomic) CGColorRef _Nonnull borderColor;
/// selected border color
@property (nonatomic) CGColorRef _Nonnull selectedBorderColor;
/// background color when method is online
@property (nonatomic, strong) UIColor * _Nonnull onlineBackgroundColor;
/// background color when method is offline
@property (nonatomic, strong) UIColor * _Nonnull offlineBackgroundColor;
/// corner radius
@property (nonatomic) CGFloat cornerRadius;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

/// Payment method type </br>
/// See more: https://data.imoje.pl/docs/en/api-transaction_en.pdf#page=14
typedef SWIFT_ENUM(NSInteger, PaymentMethodType, closed) {
/// Pay-By-Link online transfers.
  PaymentMethodTypePbl = 0,
/// Payment by card
  PaymentMethodTypeCard = 1,
/// Payment BLIK
  PaymentMethodTypeBlik = 2,
/// Pay with ING
  PaymentMethodTypeIng = 3,
/// Pay with Twisto
  PaymentMethodTypeTwisto = 4,
/// Unknown type
  PaymentMethodTypeUnknown = 5,
};


/// List payment method code view
SWIFT_CLASS("_TtC8iMojeSDK17PaymentMethodView")
@interface PaymentMethodView : UIView
/// padding within item
@property (nonatomic) CGFloat padding;
/// height of item
@property (nonatomic) CGFloat itemHeight;
/// numbers of bank item on row
@property (nonatomic) NSInteger numbersOfColumn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface PaymentMethodView (SWIFT_EXTENSION(iMojeSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Payment profile information
SWIFT_CLASS("_TtC8iMojeSDK14PaymentProfile")
@interface PaymentProfile : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PaymentWidgetType, closed) {
/// Płatność za pomocą usługi oneclick
  PaymentWidgetTypeOneclick = 0,
/// Płatność za pomocą usługi recurring
  PaymentWidgetTypeRecurring = 1,
/// Płatność kartą 3DS
  PaymentWidgetTypeEcom3ds = 2,
/// Unknown type
  PaymentWidgetTypeUnknown = 3,
};

/// Provider status code type </br>
/// 10.1.1. Provider status codes
typedef SWIFT_ENUM(NSInteger, ProviderStatusCodeType, closed) {
/// Payment accepted
  ProviderStatusCodeTypeAuthorized = 0,
/// Payment error
  ProviderStatusCodeTypePaymentError = 1,
/// Expiration date has expired
  ProviderStatusCodeTypeCardExpired = 2,
/// Unknown type
  ProviderStatusCodeTypeUnknown = 3,
};


/// :nodoc:
SWIFT_CLASS("_TtC8iMojeSDK7Service")
@interface Service : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Shipping information
SWIFT_CLASS("_TtC8iMojeSDK8Shipping")
@interface Shipping : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Transaction information
SWIFT_CLASS("_TtC8iMojeSDK11Transaction")
@interface Transaction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Transaction action information
SWIFT_CLASS("_TtC8iMojeSDK17TransactionAction")
@interface TransactionAction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC8iMojeSDK16TransactionLimit")
@interface TransactionLimit : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Transaction source
/// See more: https://data.imoje.pl/docs/en/api-transaction_en.pdf#page=17
typedef SWIFT_ENUM(NSInteger, TransactionSource, closed) {
/// API
  TransactionSourceApi = 0,
/// Web
  TransactionSourceWeb = 1,
/// Unknown type
  TransactionSourceUnknown = 2,
};

/// Transaction statuses </br>
/// See more: https://data.imoje.pl/docs/en/api-transaction_en.pdf#page=5
typedef SWIFT_ENUM(NSInteger, TransactionStatus, closed) {
/// A new, unhandled transaction
  TransactionStatusNew = 0,
/// Transaction authorization
  TransactionStatusAuthorized = 1,
/// Waiting for status
  TransactionStatusPending = 2,
/// Sent for implementation
  TransactionStatusSubmitted = 3,
/// Transaction rejected
  TransactionStatusRejected = 4,
/// Transaction completed
  TransactionStatusSettled = 5,
/// Transaction error
  TransactionStatusError = 6,
/// Transaction canceled
  TransactionStatusCanceled = 7,
/// Transaction with unknown status
  TransactionStatusUnknown = 8,
};

/// Transaction type
/// See more: https://data.imoje.pl/docs/en/api-transaction_en.pdf#page=11
typedef SWIFT_ENUM(NSInteger, TransactionType, closed) {
/// Sale
  TransactionTypeSale = 0,
/// Refund
  TransactionTypeRefund = 1,
/// Unknown type
  TransactionTypeUnknown = 2,
};


SWIFT_CLASS("_TtC8iMojeSDK13TwistoPayment")
@interface TwistoPayment : CreatePayment
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









@class UIViewController;

/// iMojeSDK
SWIFT_CLASS("_TtC8iMojeSDK8iMojeSDK")
@interface iMojeSDK : NSObject
/// share instance imoje sdk
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) iMojeSDK * _Nonnull sharedInstance;)
+ (iMojeSDK * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set sdk language
/// \param language language code
///
- (void)setLanguageWithLanguage:(NSString * _Nonnull)language;
/// Set sandbox environment for card testing
/// \param isSandbox indicate use sandbox environment
///
- (void)setSandboxWithIsSandbox:(BOOL)isSandbox;
/// Configure sdk
/// \param merchantId merchant id
///
/// \param serviceId service id
///
/// \param serviceKey service key
///
/// \param accessToken access token
///
- (void)configureWithMerchantId:(NSString * _Nonnull)merchantId serviceId:(NSString * _Nonnull)serviceId serviceKey:(NSString * _Nonnull)serviceKey accessToken:(NSString * _Nonnull)accessToken;
/// Getting transaction data
/// \param txnId transaction id
///
/// \param completion completion callback <code>OnGetTransactiOnErrorCallback</code>
///
- (void)getTransactionWithTxnId:(NSString * _Nonnull)txnId on:(void (^ _Nonnull)(Transaction * _Nullable, NSError * _Nullable))completion;
/// Creating a new transaction
/// \param info <code>CreateTransaction</code> information
///
/// \param completion completion callback <code>OnCreateTransactiCallback</code>
///
- (void)createTransactionWithInfo:(CreateTransaction * _Nonnull)info on:(void (^ _Nonnull)(TransactionAction * _Nullable, NSError * _Nullable))completion;
/// Create new payment link
/// \param info <code>CreatePayment</code> information
///
/// \param completion completion callback <code>OnCreatePaymentCallback</code>
///
- (void)createPaymentWithInfo:(CreatePayment * _Nonnull)info on:(void (^ _Nonnull)(Payment * _Nullable, NSError * _Nullable))completion;
/// Get payment data
/// \param pId payment id
///
/// \param completion completion callback <code>OnGetPaymentCallback</code>
///
- (void)getPaymentWithPId:(NSString * _Nonnull)pId on:(void (^ _Nonnull)(Payment * _Nullable, NSError * _Nullable))completion;
/// Information about merchant’s services
/// \param completion completion callback <code>OnGetListServicesCallback</code>
///
- (void)getListServicesWithCompletion:(void (^ _Nonnull)(NSArray<Service *> * _Nonnull, NSError * _Nullable))completion;
/// Information about merchant’s service with defined <code>sId</code> and possible payment methods
/// \param sId service id
///
/// \param completion completion callback <code>OnGetServiceCallback</code>
///
- (void)getServiceWithSId:(NSString * _Nonnull)sId on:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completion;
/// Debit an existing payment profile
/// \param info <code>DebitPaymentProfile</code> information
///
/// \param completion completion callback <code>OnDebitPaymentProfileCallback</code>
///
- (void)debitPaymentProfileWithInfo:(DebitPaymentProfile * _Nonnull)info on:(void (^ _Nonnull)(Transaction * _Nullable, NSError * _Nullable))completion;
/// Get information about the payment profile with the given <code>pId</code>
/// \param pId payment profile id
///
/// \param completion completion callback <code>OnGetPaymentProfileCallback</code>
///
- (void)getPaymentProfileByIdWithPId:(NSString * _Nonnull)pId on:(void (^ _Nonnull)(PaymentProfile * _Nullable, NSError * _Nullable))completion;
/// Get information about the payment profile with the given <code>cId</code>
/// \param cId customer id
///
/// \param completion completion callback <code>OnGetListPaymentProfilesCallback</code>
///
- (void)getListPaymentProfilesByCustomerIdWithCId:(NSString * _Nonnull)cId on:(void (^ _Nonnull)(NSArray<PaymentProfile *> * _Nonnull, NSError * _Nullable))completion;
/// Deactive the payment profile with the given <code>pId</code>
/// \param pId payment profile id
///
/// \param completion completion callback <code>OnDeactivePaymentProfileCallback</code>
///
- (void)deactivePaymentProfileWithIdWithPId:(NSString * _Nonnull)pId on:(void (^ _Nonnull)(PaymentProfile * _Nullable, NSError * _Nullable))completion;
/// Delete the payment profile with the given <code>pId</code>
/// \param pId payment profile id
///
/// \param completion completion callback <code>OnDeletePaymentProfileCallback</code>
///
- (void)deletePaymentProfileWithIdWithPId:(NSString * _Nonnull)pId on:(void (^ _Nonnull)(PaymentProfile * _Nullable, NSError * _Nullable))completion;
/// Checkout flow
/// \param from from view controller to open check out flow
///
/// \param info <code>Checkout</code> information
/// </br>Note: <code>serviceId</code>, <code>currency</code>, <code>successReturnURL</code> and <code>failureReturnURl</code> of information will be ignore
///
/// \param completion completion callback
///
- (void)checkoutFrom:(UIViewController * _Nullable)from info:(Checkout * _Nonnull)info on:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Get bank icon
/// \param pmc payment method code
/// <ul>
///   <li>
///     completion: completion callback
///   </li>
/// </ul>
///
- (void)getBankIconWithPmc:(enum PaymentMethodCodeType)pmc on:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Add bank list view to superview
/// \param superView view contains bank list view
///
/// \param pm payment method
///
/// \param currency currency (default: PLN)
///
/// \param completion completion callback
///
- (void)addBankListToSuperView:(UIView * _Nonnull)superView pm:(enum PaymentMethodType)pm currency:(NSString * _Nonnull)currency on:(void (^ _Nonnull)(PaymentMethod * _Nullable, NSError * _Nullable))completion;
@end

/// iMojeSDKError
typedef SWIFT_ENUM(NSInteger, iMojeSDKError, closed) {
/// Raise when user not set merchant id for sdk
  iMojeSDKErrorMissingMerchantId = 0,
/// Raise when user not set service id for sdk
  iMojeSDKErrorMissingServiceId = 1,
/// Raise when service is inactive
  iMojeSDKErrorInactiveService = 2,
/// Raise when service has empty payment method code
  iMojeSDKErrorEmptyPaymentMethodCode = 3,
/// Raise when request missing body payload
  iMojeSDKErrorMissingBody = 4,
/// Unknown error
  iMojeSDKErrorUnknown = 5,
};
static NSString * _Nonnull const iMojeSDKErrorDomain = @"iMojeSDK.iMojeSDKError";

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
