// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iMojeSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreText
import Foundation
import Kingfisher
import PassKit
import RxCocoa
import RxSwift
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_exported import iMojeSDK
public struct INGSummaryItemApplePay {
  public init(itemName: Swift.String, amount: Foundation.NSDecimalNumber)
}
@objc public class INGBank : ObjectiveC.NSObject {
  public var paymentMethod: iMojeSDK.INGPaymentMethodType?
  public var paymentMethodCode: iMojeSDK.INGPaymentMethodCodeType?
  public var isActive: Swift.Bool?
  public var isOnline: Swift.Bool?
  public var descriptionField: Swift.String?
  public var currency: Swift.String?
  public init(paymentMethod: iMojeSDK.INGPaymentMethodType?, paymentMethodCode: iMojeSDK.INGPaymentMethodCodeType?, isActive: Swift.Bool?, isOnline: Swift.Bool?, currency: Swift.String?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var navigationBarTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var successRedirectURL: Swift.String
  @_Concurrency.MainActor(unsafe) public var failureRedirectURL: Swift.String
  @_Concurrency.MainActor(unsafe) public var onSuccess: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onFailure: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(content: iMojeSDK.INGWebViewContent, successRedirectURL: Swift.String, failureRedirectURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public typealias ChosePaymentMethodViewItemSelected = (iMojeSDK.INGPaymentMethod) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGChosePaymentMethodView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var shouldUseBuilInItems: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var customItems: [iMojeSDK.INGPaymentMethod] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var itemSelected: iMojeSDK.ChosePaymentMethodViewItemSelected?
  @_Concurrency.MainActor(unsafe) public var alwaysBounceVertical: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
public struct INGPaymentMethod {
  public var id: Swift.String
  public var image: iMojeSDK.INGPaymentMethodImage
  public var name: Swift.String?
  public static func custom(id: Swift.String, image: iMojeSDK.INGPaymentMethodImage, name: Swift.String?) -> iMojeSDK.INGPaymentMethod
  public static func pbl() -> iMojeSDK.INGPaymentMethod
  public static func blik() -> iMojeSDK.INGPaymentMethod
  public static func twisto() -> iMojeSDK.INGPaymentMethod
  public static func paypo() -> iMojeSDK.INGPaymentMethod
  public static func card() -> iMojeSDK.INGPaymentMethod
  public static func applePay() -> iMojeSDK.INGPaymentMethod
  public static func allStandard() -> [iMojeSDK.INGPaymentMethod]
}
public enum INGPaymentMethodImage : Swift.Equatable {
  case url(imageURL: Foundation.URL)
  case named(imageName: Swift.String)
  case standard(type: iMojeSDK.INGPaymentStandardMethodImage)
  public static func == (a: iMojeSDK.INGPaymentMethodImage, b: iMojeSDK.INGPaymentMethodImage) -> Swift.Bool
}
public enum INGPaymentStandardMethodImage : Swift.Equatable {
  case blik
  case pbl
  case twisto
  case paypo
  case card
  case visa
  case masterCard
  case applePay
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: iMojeSDK.INGPaymentStandardMethodImage, b: iMojeSDK.INGPaymentStandardMethodImage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension iMojeSDK.INGPaymentMethod : Swift.Identifiable {
  public typealias ID = Swift.String
}
extension iMojeSDK.INGPaymentMethod : Swift.Equatable {
  public static func == (a: iMojeSDK.INGPaymentMethod, b: iMojeSDK.INGPaymentMethod) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGBankViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var numbersOfColumn: Swift.Int
  @_Concurrency.MainActor(unsafe) public var bankSelected: ((iMojeSDK.INGBank) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var navigationBarTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textForTitleLabel: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(banks: [iMojeSDK.INGBank])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGPoweredView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct INGConfirm {
  public var amount: Swift.Int
  public var title: Swift.String?
  public var currency: Swift.String
  public var orderId: Swift.String?
  public var customer: iMojeSDK.INGConfirm.Customer?
  public var paymentMethod: iMojeSDK.INGPaymentMethodType
  public var paymentFor: Swift.String?
  public init(amount: Swift.Int)
}
extension iMojeSDK.INGConfirm {
  public struct Customer {
    public var email: Swift.String?
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var phone: Swift.String?
    public var cid: Swift.String?
    public var fullName: Swift.String {
      get
    }
    public init()
  }
}
public enum INGWebViewContent {
  case request(request: Foundation.URLRequest)
  case html(html: Swift.String, baseURL: Foundation.URL?)
}
extension UIKit.UIImage {
  convenience public init?(imoje: Swift.String)
}
@objc public enum iMojeSDKError : Swift.Int {
  case missingMerchantId
  case missingServiceId
  case inactiveService
  case emptyPaymentMethodCode
  case missingBody
  case applePayUserCancelled
  case applePayNotSupported
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension iMojeSDK.iMojeSDKError : Swift.Error, Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, transparency: CoreFoundation.CGFloat = 1)
  convenience public init(hex: Swift.Int, transparency: CoreFoundation.CGFloat = 1)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PaymentMethodCodeViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var padding: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic public var borderWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic public var borderColor: CoreGraphics.CGColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var selectedBorderColor: CoreGraphics.CGColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var onlineBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var offlineBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var cornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGPaymentMethodView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var padding: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic public var itemHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic public var numbersOfColumn: Swift.Int
  @_Concurrency.MainActor(unsafe) public var textForTitleLabel: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var methods: [iMojeSDK.INGBank] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var methodSelected: RxCocoa.ControlEvent<iMojeSDK.INGBank> {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
extension iMojeSDK.INGPaymentMethodView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGChosePaymentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var itemSelected: iMojeSDK.ChosePaymentMethodViewItemSelected?
  @_Concurrency.MainActor(unsafe) public var navigationBarTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(customItems: [iMojeSDK.INGPaymentMethod] = [], shouldUseBuilInItems: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public struct WalletApplePay : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum INGPaymentMethodCodeType {
  case mtransfer
  case bzwbk
  case pekao24
  case inteligo
  case ipko
  case getin
  case noble
  case ideabank
  case creditagricole
  case tmobile
  case alior
  case pbs
  case millennium
  case citi
  case bos
  case bnpparibas
  case pocztowy
  case plusbank
  case bs
  case bspb
  case envelo
  case eurobank
  case deutschebank
  case raiffeisenpolbank
  case orange
  case bspw
  case nest
  case neo
  case toyota
  case ecom3ds
  case oneclick
  case recurring
  case blik
  case ing
  case twisto
  case paypo
  case unknown
  case custom(code: Swift.String, image: iMojeSDK.INGPaymentMethodCodeType.Image, name: Swift.String?)
}
extension iMojeSDK.INGPaymentMethodCodeType {
  public enum Image : Swift.Equatable {
    case url(imageURL: Foundation.URL)
    case named(imageName: Swift.String)
    public static func == (a: iMojeSDK.INGPaymentMethodCodeType.Image, b: iMojeSDK.INGPaymentMethodCodeType.Image) -> Swift.Bool
  }
}
extension iMojeSDK.INGPaymentMethodCodeType {
  public func name() -> Swift.String
  public func toString() -> Swift.String
  public static func from(string: Swift.String?) -> iMojeSDK.INGPaymentMethodCodeType
}
public enum SDKStandardLanguageType {
  case en
  case pl
  case custom(languageCode: Swift.String)
  public var languageCode: Swift.String {
    get
  }
}
public enum INGFontStyle : Swift.CaseIterable {
  case regular
  case bold
  public var value: Swift.String {
    get
  }
  public var font: UIKit.UIFont {
    get
  }
  public static func == (a: iMojeSDK.INGFontStyle, b: iMojeSDK.INGFontStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [iMojeSDK.INGFontStyle]
  public static var allCases: [iMojeSDK.INGFontStyle] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ConfirmViewCallback = () -> Swift.Void
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGConfirmView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callback: iMojeSDK.ConfirmViewCallback?
  @_Concurrency.MainActor(unsafe) final public let confirm: iMojeSDK.INGConfirm
  @_Concurrency.MainActor(unsafe) public init(confirm: iMojeSDK.INGConfirm)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGConfirmViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var callback: iMojeSDK.ConfirmViewCallback?
  @_Concurrency.MainActor(unsafe) final public let confirm: iMojeSDK.INGConfirm
  @_Concurrency.MainActor(unsafe) public var navigationBarTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(confirm: iMojeSDK.INGConfirm)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@available(iOS 11.0, *)
public struct INGApplePayTransaction {
  public init(merchantIdentifier: Swift.String, supportedNetworks: [PassKit.PKPaymentNetwork] = [.visa, .masterCard], supportedCountries: Swift.Set<Swift.String> = ["PL"], merchantCapabilities: PassKit.PKMerchantCapability = .capability3DS, countryCode: Swift.String = "PL", currencyCode: Swift.String = "PLN", paymentSummaryItems: [iMojeSDK.INGSummaryItemApplePay])
  public init(merchantIdentifier: Swift.String, supportedNetworks: [PassKit.PKPaymentNetwork] = [.visa, .masterCard], supportedCountries: Swift.Set<Swift.String> = ["PL"], merchantCapabilities: PassKit.PKMerchantCapability = .capability3DS, countryCode: Swift.String = "PL", currencyCode: Swift.String = "PLN", paymentItemDescription: Swift.String, amount: Foundation.NSDecimalNumber)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class INGWebView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public static var hideAddress: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var successRedirectURL: Swift.String
  @_Concurrency.MainActor(unsafe) public var failureRedirectURL: Swift.String
  @_Concurrency.MainActor(unsafe) public var onSuccess: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onFailure: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(successRedirectURL: Swift.String, failureRedirectURL: Swift.String)
  @_Concurrency.MainActor(unsafe) public func load(content: iMojeSDK.INGWebViewContent)
  @objc deinit
}
extension iMojeSDK.INGWebView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class iMoje : ObjectiveC.NSObject {
  @objc public static let sharedInstance: iMojeSDK.iMoje
  final public func setLanguage(language: iMojeSDK.SDKStandardLanguageType)
  @objc deinit
}
extension RxSwift.Reactive where Base : iMojeSDK.iMoje {
  public func getBankIcon(pmc: Swift.String) -> RxSwift.Observable<UIKit.UIImage?>
}
public enum INGPaymentMethodType {
  case pbl
  case card
  case blik
  case ing
  case twisto
  case paypo
  case applePay
  case unknown
  case custom(code: Swift.String)
}
extension iMojeSDK.INGPaymentMethodType {
  public func name() -> Swift.String
  public func toString() -> Swift.String
  public static func from(string: Swift.String?) -> iMojeSDK.INGPaymentMethodType
}
extension Swift.Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
    set(value)
  }
}
public struct INGApplePayResult {
  public let paymentToken: PassKit.PKPaymentToken
  public let codable: iMojeSDK.WalletApplePay?
  public let dictionary: [Swift.String : Any]?
}
extension Swift.String {
  public func sha256() -> Swift.String
}
@objc @available(iOS 11.0, *)
public class INGApplePayHandler : ObjectiveC.NSObject {
  public var onSuccess: ((iMojeSDK.INGApplePayResult) -> Swift.Void)?
  public var onFailure: ((iMojeSDK.iMojeSDKError) -> Swift.Void)?
  public init(onSuccess: ((iMojeSDK.INGApplePayResult) -> Swift.Void)?, onFailure: ((iMojeSDK.iMojeSDKError) -> Swift.Void)?)
  public func purchase(in controller: UIKit.UIViewController, with transaction: iMojeSDK.INGApplePayTransaction)
  @objc deinit
}
@available(iOS 11.0, *)
extension iMojeSDK.INGApplePayHandler : PassKit.PKPaymentAuthorizationViewControllerDelegate {
  @objc dynamic public func paymentAuthorizationViewControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationViewController)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didAuthorizePayment payment: PassKit.PKPayment, handler completion: @escaping (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
}
extension iMojeSDK.INGPaymentStandardMethodImage : Swift.Hashable {}
extension iMojeSDK.iMojeSDKError : Swift.Equatable {}
extension iMojeSDK.iMojeSDKError : Swift.Hashable {}
extension iMojeSDK.iMojeSDKError : Swift.RawRepresentable {}
extension iMojeSDK.INGFontStyle : Swift.Equatable {}
extension iMojeSDK.INGFontStyle : Swift.Hashable {}
